# Define placeholders and variables
X = tf.placeholder(tf.float32, shape = [None, IMG_SIZE], name = 'X')


# 0th Capsule Parameters
ph_A0 = tf.placeholder(tf.float32, shape = [None, 1], name = 'ph_A0')
ENC_W1_A0 = tf.get_variable(shape = [IMG_SIZE, ENC_DIM],  name = 'ENC_W1_A0')
ENC_B1_A0 = tf.get_variable(shape = [ENC_DIM],  name = 'ENC_B1_A0')
ENC_W2_A0 = tf.get_variable(shape = [ENC_DIM, LATENT_DIM],  name = 'ENC_W2_A0')
ENC_B2_A0 = tf.get_variable(shape = [LATENT_DIM],  name = 'ENC_B2_A0')
SAM_W_mu_A0 = tf.get_variable(shape = [LATENT_DIM, LATENT_DIM],  name = 'SAM_W_mu_A0')
SAM_B_mu_A0 = tf.get_variable(shape = [LATENT_DIM],  name = 'SAM_B_mu_A0')
SAM_W_logstd_A0 = tf.get_variable(shape = [LATENT_DIM, LATENT_DIM],  name = 'SAM_W_logstd_A0')
SAM_B_logstd_A0 = tf.get_variable(shape = [LATENT_DIM],  name = 'SAM_B_logstd_A0')
DEC_W1_A0 = tf.get_variable(shape = [LATENT_DIM, ENC_DIM],  name = 'DEC_W1_A0')
DEC_B1_A0 = tf.get_variable(shape = [ENC_DIM],  name = 'DEC_B1_A0')
DEC_W2_A0 = tf.get_variable(shape = [ENC_DIM, IMG_SIZE],  name = 'DEC_W2_A0')
DEC_B2_A0 = tf.get_variable(shape = [IMG_SIZE],  name = 'DEC_B2_A0')
ATT_W1_A0 = tf.get_variable(shape = [ENC_DIM, 1],  name = 'ATT_W1_A0')
ATT_B1_A0 = tf.get_variable(shape = [1],  name = 'ATT_B1_A0')
# 0th Capsule Forward Pass
Y_1_A0 = tf.add(tf.matmul(X, ENC_W1_A0), ENC_B1_A0)
Y_2_A0 = tf.nn.relu(Y_1_A0)
Y_2_1_A0 = tf.nn.dropout(Y_2_A0, PKEEP)
Y_3_A0 = tf.add(tf.matmul(Y_2_1_A0, ENC_W2_A0), ENC_B2_A0)
attr_1_A0 = tf.add(tf.matmul(Y_2_1_A0, ATT_W1_A0), ATT_B1_A0)
attr_A0 = tf.nn.sigmoid(attr_1_A0)
Y_4_A0 = tf.nn.tanh(Y_3_A0)
Y_4_1_A0 = tf.nn.dropout(Y_4_A0, PKEEP)
mu_A0 = tf.add(tf.matmul(Y_4_1_A0, SAM_W_mu_A0), SAM_B_mu_A0)
logstd_A0 = tf.add(tf.matmul(Y_4_1_A0, SAM_W_logstd_A0), SAM_B_logstd_A0)
noise_A0 = tf.random_normal([1, LATENT_DIM])
Z_A0 = mu_A0 + tf.multiply(noise_A0, tf.exp(.5*logstd_A0))
Y_5_A0 = tf.add(tf.matmul(Z_A0, DEC_W1_A0), DEC_B1_A0)
Y_6_A0 = tf.nn.relu(Y_5_A0)
Y_6_1_A0 = tf.nn.dropout(Y_6_A0, PKEEP)
Y_7_A0 = tf.add(tf.matmul(Y_6_1_A0, DEC_W2_A0), DEC_B2_A0)
Y_7_1_A0 = tf.multiply(Y_7_A0, attr_A0)
Y_rec_A0 = tf.nn.sigmoid(Y_7_1_A0)
# 0th Capsule KLT Loss
KLT_A0 = -0.5*tf.reduce_sum(1 + 2*logstd_A0 - tf.pow(mu_A0, 2) - tf.exp(2*logstd_A0), axis = 1)
# 0th Capsule Attr Pred
attr_loss_A0 = tf.nn.sigmoid_cross_entropy_with_logits(logits = attr_A0, labels = ph_A0)


# 1st Capsule Parameters
ph_A1 = tf.placeholder(tf.float32, shape = [None, 1], name = 'ph_A1')
ENC_W1_A1 = tf.get_variable(shape = [IMG_SIZE, ENC_DIM],  name = 'ENC_W1_A1')
ENC_B1_A1 = tf.get_variable(shape = [ENC_DIM],  name = 'ENC_B1_A1')
ENC_W2_A1 = tf.get_variable(shape = [ENC_DIM, LATENT_DIM],  name = 'ENC_W2_A1')
ENC_B2_A1 = tf.get_variable(shape = [LATENT_DIM],  name = 'ENC_B2_A1')
SAM_W_mu_A1 = tf.get_variable(shape = [LATENT_DIM, LATENT_DIM],  name = 'SAM_W_mu_A1')
SAM_B_mu_A1 = tf.get_variable(shape = [LATENT_DIM],  name = 'SAM_B_mu_A1')
SAM_W_logstd_A1 = tf.get_variable(shape = [LATENT_DIM, LATENT_DIM],  name = 'SAM_W_logstd_A1')
SAM_B_logstd_A1 = tf.get_variable(shape = [LATENT_DIM],  name = 'SAM_B_logstd_A1')
DEC_W1_A1 = tf.get_variable(shape = [LATENT_DIM, ENC_DIM],  name = 'DEC_W1_A1')
DEC_B1_A1 = tf.get_variable(shape = [ENC_DIM],  name = 'DEC_B1_A1')
DEC_W2_A1 = tf.get_variable(shape = [ENC_DIM, IMG_SIZE],  name = 'DEC_W2_A1')
DEC_B2_A1 = tf.get_variable(shape = [IMG_SIZE],  name = 'DEC_B2_A1')
ATT_W1_A1 = tf.get_variable(shape = [ENC_DIM, 1],  name = 'ATT_W1_A1')
ATT_B1_A1 = tf.get_variable(shape = [1],  name = 'ATT_B1_A1')
# 1st Capsule Forward Pass
Y_1_A1 = tf.add(tf.matmul(X, ENC_W1_A1), ENC_B1_A1)
Y_2_A1 = tf.nn.relu(Y_1_A1)
Y_2_1_A1 = tf.nn.dropout(Y_2_A1, PKEEP)
Y_3_A1 = tf.add(tf.matmul(Y_2_1_A1, ENC_W2_A1), ENC_B2_A1)
Y_4_A1 = tf.nn.tanh(Y_3_A1)
attr_1_A1 = tf.add(tf.matmul(Y_2_1_A1, ATT_W1_A1), ATT_B1_A1)
attr_A1 = tf.nn.sigmoid(attr_1_A1)
Y_4_1_A1 = tf.nn.dropout(Y_4_A1, PKEEP)
mu_A1 = tf.add(tf.matmul(Y_4_1_A1, SAM_W_mu_A1), SAM_B_mu_A1)
logstd_A1 = tf.add(tf.matmul(Y_4_1_A1, SAM_W_logstd_A1), SAM_B_logstd_A1)
noise_A1 = tf.random_normal([1, LATENT_DIM])
Z_A1 = mu_A1 + tf.multiply(noise_A1, tf.exp(.5*logstd_A1))
Y_5_A1 = tf.add(tf.matmul(Z_A1, DEC_W1_A1), DEC_B1_A1)
Y_6_A1 = tf.nn.relu(Y_5_A1)
Y_6_1_A1 = tf.nn.dropout(Y_6_A1, PKEEP)
Y_7_A1 = tf.add(tf.matmul(Y_6_1_A1, DEC_W2_A1), DEC_B2_A1)
Y_7_1_A1 = tf.multiply(Y_7_A1, attr_A1)
Y_rec_A1 = tf.nn.sigmoid(Y_7_1_A1)
# 1st Capsule KLT Loss
KLT_A1 = -0.5*tf.reduce_sum(1 + 2*logstd_A1 - tf.pow(mu_A1, 2) - tf.exp(2*logstd_A1), axis = 1)
# 0th Capsule Attr Pred
attr_loss_A1 = tf.nn.sigmoid_cross_entropy_with_logits(logits = attr_A1, labels = ph_A1)


# 0th Capsule Parameters
ph_A2 = tf.placeholder(tf.float32, shape = [None, 1], name = 'ph_A2')
ENC_W1_A2 = tf.get_variable(shape = [IMG_SIZE, ENC_DIM],  name = 'ENC_W1_A2')
ENC_B1_A2 = tf.get_variable(shape = [ENC_DIM],  name = 'ENC_B1_A2')
ENC_W2_A2 = tf.get_variable(shape = [ENC_DIM, LATENT_DIM],  name = 'ENC_W2_A2')
ENC_B2_A2 = tf.get_variable(shape = [LATENT_DIM],  name = 'ENC_B2_A2')
SAM_W_mu_A2 = tf.get_variable(shape = [LATENT_DIM, LATENT_DIM],  name = 'SAM_W_mu_A2')
SAM_B_mu_A2 = tf.get_variable(shape = [LATENT_DIM],  name = 'SAM_B_mu_A2')
SAM_W_logstd_A2 = tf.get_variable(shape = [LATENT_DIM, LATENT_DIM],  name = 'SAM_W_logstd_A2')
SAM_B_logstd_A2 = tf.get_variable(shape = [LATENT_DIM],  name = 'SAM_B_logstd_A2')
DEC_W1_A2 = tf.get_variable(shape = [LATENT_DIM, ENC_DIM],  name = 'DEC_W1_A2')
DEC_B1_A2 = tf.get_variable(shape = [ENC_DIM],  name = 'DEC_B1_A2')
DEC_W2_A2 = tf.get_variable(shape = [ENC_DIM, IMG_SIZE],  name = 'DEC_W2_A2')
DEC_B2_A2 = tf.get_variable(shape = [IMG_SIZE],  name = 'DEC_B2_A2')
ATT_W1_A2 = tf.get_variable(shape = [ENC_DIM, 1],  name = 'ATT_W1_A2')
ATT_B1_A2 = tf.get_variable(shape = [1],  name = 'ATT_B1_A2')
# 0th Capsule Forward Pass
Y_1_A2 = tf.add(tf.matmul(X, ENC_W1_A2), ENC_B1_A2)
Y_2_A2 = tf.nn.relu(Y_1_A2)
Y_2_1_A2 = tf.nn.dropout(Y_2_A2, PKEEP)
Y_3_A2 = tf.add(tf.matmul(Y_2_1_A2, ENC_W2_A2), ENC_B2_A2)
Y_4_A2 = tf.nn.tanh(Y_3_A2)
attr_1_A2 = tf.add(tf.matmul(Y_2_1_A2, ATT_W1_A2), ATT_B1_A2)
attr_A2 = tf.nn.sigmoid(attr_1_A2)
Y_4_1_A2 = tf.nn.dropout(Y_4_A2, PKEEP)
mu_A2 = tf.add(tf.matmul(Y_4_1_A2, SAM_W_mu_A2), SAM_B_mu_A2)
logstd_A2 = tf.add(tf.matmul(Y_4_1_A2, SAM_W_logstd_A2), SAM_B_logstd_A2)
noise_A2 = tf.random_normal([1, LATENT_DIM])
Z_A2 = mu_A2 + tf.multiply(noise_A2, tf.exp(.5*logstd_A2))
Y_5_A2 = tf.add(tf.matmul(Z_A2, DEC_W1_A2), DEC_B1_A2)
Y_6_A2 = tf.nn.relu(Y_5_A2)
Y_6_1_A2 = tf.nn.dropout(Y_6_A2, PKEEP)
Y_7_A2 = tf.add(tf.matmul(Y_6_1_A2, DEC_W2_A2), DEC_B2_A2)
Y_7_1_A2 = tf.multiply(Y_7_A2, attr_A2)
Y_rec_A2 = tf.nn.sigmoid(Y_7_1_A2)
# 0th Capsule KLT Loss
KLT_A2 = -0.5*tf.reduce_sum(1 + 2*logstd_A2 - tf.pow(mu_A2, 2) - tf.exp(2*logstd_A2), axis = 1)
# 0th Capsule Attr Pred
attr_loss_A2 = tf.nn.sigmoid_cross_entropy_with_logits(logits = attr_A2, labels = ph_A2)


# 0th Capsule Parameters
ph_A3 = tf.placeholder(tf.float32, shape = [None, 1], name = 'ph_A3')
ENC_W1_A3 = tf.get_variable(shape = [IMG_SIZE, ENC_DIM],  name = 'ENC_W1_A3')
ENC_B1_A3 = tf.get_variable(shape = [ENC_DIM],  name = 'ENC_B1_A3')
ENC_W2_A3 = tf.get_variable(shape = [ENC_DIM, LATENT_DIM],  name = 'ENC_W2_A3')
ENC_B2_A3 = tf.get_variable(shape = [LATENT_DIM],  name = 'ENC_B2_A3')
SAM_W_mu_A3 = tf.get_variable(shape = [LATENT_DIM, LATENT_DIM],  name = 'SAM_W_mu_A3')
SAM_B_mu_A3 = tf.get_variable(shape = [LATENT_DIM],  name = 'SAM_B_mu_A3')
SAM_W_logstd_A3 = tf.get_variable(shape = [LATENT_DIM, LATENT_DIM],  name = 'SAM_W_logstd_A3')
SAM_B_logstd_A3 = tf.get_variable(shape = [LATENT_DIM],  name = 'SAM_B_logstd_A3')
DEC_W1_A3 = tf.get_variable(shape = [LATENT_DIM, ENC_DIM],  name = 'DEC_W1_A3')
DEC_B1_A3 = tf.get_variable(shape = [ENC_DIM],  name = 'DEC_B1_A3')
DEC_W2_A3 = tf.get_variable(shape = [ENC_DIM, IMG_SIZE],  name = 'DEC_W2_A3')
DEC_B2_A3 = tf.get_variable(shape = [IMG_SIZE],  name = 'DEC_B2_A3')
ATT_W1_A3 = tf.get_variable(shape = [ENC_DIM, 1],  name = 'ATT_W1_A3')
ATT_B1_A3 = tf.get_variable(shape = [1],  name = 'ATT_B1_A3')
# 0th Capsule Forward Pass
Y_1_A3 = tf.add(tf.matmul(X, ENC_W1_A3), ENC_B1_A3)
Y_2_A3 = tf.nn.relu(Y_1_A3)
Y_2_1_A3 = tf.nn.dropout(Y_2_A3, PKEEP)
Y_3_A3 = tf.add(tf.matmul(Y_2_1_A3, ENC_W2_A3), ENC_B2_A3)
Y_4_A3 = tf.nn.tanh(Y_3_A3)
attr_1_A3 = tf.add(tf.matmul(Y_2_1_A3, ATT_W1_A3), ATT_B1_A3)
attr_A3 = tf.nn.sigmoid(attr_1_A3)
Y_4_1_A3 = tf.nn.dropout(Y_4_A3, PKEEP)
mu_A3 = tf.add(tf.matmul(Y_4_1_A3, SAM_W_mu_A3), SAM_B_mu_A3)
logstd_A3 = tf.add(tf.matmul(Y_4_1_A3, SAM_W_logstd_A3), SAM_B_logstd_A3)
noise_A3 = tf.random_normal([1, LATENT_DIM])
Z_A3 = mu_A3 + tf.multiply(noise_A3, tf.exp(.5*logstd_A3))
Y_5_A3 = tf.add(tf.matmul(Z_A3, DEC_W1_A3), DEC_B1_A3)
Y_6_A3 = tf.nn.relu(Y_5_A3)
Y_6_1_A3 = tf.nn.dropout(Y_6_A3, PKEEP)
Y_7_A3 = tf.add(tf.matmul(Y_6_1_A3, DEC_W2_A3), DEC_B2_A3)
Y_7_1_A3 = tf.multiply(Y_7_A3, attr_A3)
Y_rec_A3 = tf.nn.sigmoid(Y_7_1_A3)
# 0th Capsule KLT Loss
KLT_A3 = -0.5*tf.reduce_sum(1 + 2*logstd_A3 - tf.pow(mu_A3, 2) - tf.exp(2*logstd_A3), axis = 1)
# 0th Capsule Attr Pred
attr_loss_A3 = tf.nn.sigmoid_cross_entropy_with_logits(logits = attr_A3, labels = ph_A3)


# 0th Capsule Parameters
ph_A4 = tf.placeholder(tf.float32, shape = [None, 1], name = 'ph_A4')
ENC_W1_A4 = tf.get_variable(shape = [IMG_SIZE, ENC_DIM],  name = 'ENC_W1_A4')
ENC_B1_A4 = tf.get_variable(shape = [ENC_DIM],  name = 'ENC_B1_A4')
ENC_W2_A4 = tf.get_variable(shape = [ENC_DIM, LATENT_DIM],  name = 'ENC_W2_A4')
ENC_B2_A4 = tf.get_variable(shape = [LATENT_DIM],  name = 'ENC_B2_A4')
SAM_W_mu_A4 = tf.get_variable(shape = [LATENT_DIM, LATENT_DIM],  name = 'SAM_W_mu_A4')
SAM_B_mu_A4 = tf.get_variable(shape = [LATENT_DIM],  name = 'SAM_B_mu_A4')
SAM_W_logstd_A4 = tf.get_variable(shape = [LATENT_DIM, LATENT_DIM],  name = 'SAM_W_logstd_A4')
SAM_B_logstd_A4 = tf.get_variable(shape = [LATENT_DIM],  name = 'SAM_B_logstd_A4')
DEC_W1_A4 = tf.get_variable(shape = [LATENT_DIM, ENC_DIM],  name = 'DEC_W1_A4')
DEC_B1_A4 = tf.get_variable(shape = [ENC_DIM],  name = 'DEC_B1_A4')
DEC_W2_A4 = tf.get_variable(shape = [ENC_DIM, IMG_SIZE],  name = 'DEC_W2_A4')
DEC_B2_A4 = tf.get_variable(shape = [IMG_SIZE],  name = 'DEC_B2_A4')
ATT_W1_A4 = tf.get_variable(shape = [ENC_DIM, 1],  name = 'ATT_W1_A4')
ATT_B1_A4 = tf.get_variable(shape = [1],  name = 'ATT_B1_A4')
# 0th Capsule Forward Pass
Y_1_A4 = tf.add(tf.matmul(X, ENC_W1_A4), ENC_B1_A4)
Y_2_A4 = tf.nn.relu(Y_1_A4)
Y_2_1_A4 = tf.nn.dropout(Y_2_A4, PKEEP)
Y_3_A4 = tf.add(tf.matmul(Y_2_1_A4, ENC_W2_A4), ENC_B2_A4)
Y_4_A4 = tf.nn.tanh(Y_3_A4)
attr_1_A4 = tf.add(tf.matmul(Y_2_1_A4, ATT_W1_A4), ATT_B1_A4)
attr_A4 = tf.nn.sigmoid(attr_1_A4)
Y_4_1_A4 = tf.nn.dropout(Y_4_A4, PKEEP)
mu_A4 = tf.add(tf.matmul(Y_4_1_A4, SAM_W_mu_A4), SAM_B_mu_A4)
logstd_A4 = tf.add(tf.matmul(Y_4_1_A4, SAM_W_logstd_A4), SAM_B_logstd_A4)
noise_A4 = tf.random_normal([1, LATENT_DIM])
Z_A4 = mu_A4 + tf.multiply(noise_A4, tf.exp(.5*logstd_A4))
Y_5_A4 = tf.add(tf.matmul(Z_A4, DEC_W1_A4), DEC_B1_A4)
Y_6_A4 = tf.nn.relu(Y_5_A4)
Y_6_1_A4 = tf.nn.dropout(Y_6_A4, PKEEP)
Y_7_A4 = tf.add(tf.matmul(Y_6_1_A4, DEC_W2_A4), DEC_B2_A4)
Y_7_1_A4 = tf.multiply(Y_7_A4, attr_A4)
Y_rec_A4 = tf.nn.sigmoid(Y_7_1_A4)
# 0th Capsule KLT Loss
KLT_A4 = -0.5*tf.reduce_sum(1 + 2*logstd_A4 - tf.pow(mu_A4, 2) - tf.exp(2*logstd_A4), axis = 1)
# 0th Capsule Attr Pred
attr_loss_A4 = tf.nn.sigmoid_cross_entropy_with_logits(logits = attr_A4, labels = ph_A4)


# 0th Capsule Parameters
ph_A5 = tf.placeholder(tf.float32, shape = [None, 1], name = 'ph_A5')
ENC_W1_A5 = tf.get_variable(shape = [IMG_SIZE, ENC_DIM],  name = 'ENC_W1_A5')
ENC_B1_A5 = tf.get_variable(shape = [ENC_DIM],  name = 'ENC_B1_A5')
ENC_W2_A5 = tf.get_variable(shape = [ENC_DIM, LATENT_DIM],  name = 'ENC_W2_A5')
ENC_B2_A5 = tf.get_variable(shape = [LATENT_DIM],  name = 'ENC_B2_A5')
SAM_W_mu_A5 = tf.get_variable(shape = [LATENT_DIM, LATENT_DIM],  name = 'SAM_W_mu_A5')
SAM_B_mu_A5 = tf.get_variable(shape = [LATENT_DIM],  name = 'SAM_B_mu_A5')
SAM_W_logstd_A5 = tf.get_variable(shape = [LATENT_DIM, LATENT_DIM],  name = 'SAM_W_logstd_A5')
SAM_B_logstd_A5 = tf.get_variable(shape = [LATENT_DIM],  name = 'SAM_B_logstd_A5')
DEC_W1_A5 = tf.get_variable(shape = [LATENT_DIM, ENC_DIM],  name = 'DEC_W1_A5')
DEC_B1_A5 = tf.get_variable(shape = [ENC_DIM],  name = 'DEC_B1_A5')
DEC_W2_A5 = tf.get_variable(shape = [ENC_DIM, IMG_SIZE],  name = 'DEC_W2_A5')
DEC_B2_A5 = tf.get_variable(shape = [IMG_SIZE],  name = 'DEC_B2_A5')
ATT_W1_A5 = tf.get_variable(shape = [ENC_DIM, 1],  name = 'ATT_W1_A5')
ATT_B1_A5 = tf.get_variable(shape = [1],  name = 'ATT_B1_A5')
# 0th Capsule Forward Pass
Y_1_A5 = tf.add(tf.matmul(X, ENC_W1_A5), ENC_B1_A5)
Y_2_A5 = tf.nn.relu(Y_1_A5)
Y_2_1_A5 = tf.nn.dropout(Y_2_A5, PKEEP)
Y_3_A5 = tf.add(tf.matmul(Y_2_1_A5, ENC_W2_A5), ENC_B2_A5)
Y_4_A5 = tf.nn.tanh(Y_3_A5)
attr_1_A5 = tf.add(tf.matmul(Y_2_1_A5, ATT_W1_A5), ATT_B1_A5)
attr_A5 = tf.nn.sigmoid(attr_1_A5)
Y_4_1_A5 = tf.nn.dropout(Y_4_A5, PKEEP)
mu_A5 = tf.add(tf.matmul(Y_4_1_A5, SAM_W_mu_A5), SAM_B_mu_A5)
logstd_A5 = tf.add(tf.matmul(Y_4_1_A5, SAM_W_logstd_A5), SAM_B_logstd_A5)
noise_A5 = tf.random_normal([1, LATENT_DIM])
Z_A5 = mu_A5 + tf.multiply(noise_A5, tf.exp(.5*logstd_A5))
Y_5_A5 = tf.add(tf.matmul(Z_A5, DEC_W1_A5), DEC_B1_A5)
Y_6_A5 = tf.nn.relu(Y_5_A5)
Y_6_1_A5 = tf.nn.dropout(Y_6_A5, PKEEP)
Y_7_A5 = tf.add(tf.matmul(Y_6_1_A5, DEC_W2_A5), DEC_B2_A5)
Y_7_1_A5 = tf.multiply(Y_7_A5, attr_A5)
Y_rec_A5 = tf.nn.sigmoid(Y_7_1_A5)
# 0th Capsule KLT Loss
KLT_A5 = -0.5*tf.reduce_sum(1 + 2*logstd_A5 - tf.pow(mu_A5, 2) - tf.exp(2*logstd_A5), axis = 1)
# 0th Capsule Attr Pred
attr_loss_A5 = tf.nn.sigmoid_cross_entropy_with_logits(logits = attr_A5, labels = ph_A5)


# 0th Capsule Parameters
ph_A6 = tf.placeholder(tf.float32, shape = [None, 1], name = 'ph_A6')
ENC_W1_A6 = tf.get_variable(shape = [IMG_SIZE, ENC_DIM],  name = 'ENC_W1_A6')
ENC_B1_A6 = tf.get_variable(shape = [ENC_DIM],  name = 'ENC_B1_A6')
ENC_W2_A6 = tf.get_variable(shape = [ENC_DIM, LATENT_DIM],  name = 'ENC_W2_A6')
ENC_B2_A6 = tf.get_variable(shape = [LATENT_DIM],  name = 'ENC_B2_A6')
SAM_W_mu_A6 = tf.get_variable(shape = [LATENT_DIM, LATENT_DIM],  name = 'SAM_W_mu_A6')
SAM_B_mu_A6 = tf.get_variable(shape = [LATENT_DIM],  name = 'SAM_B_mu_A6')
SAM_W_logstd_A6 = tf.get_variable(shape = [LATENT_DIM, LATENT_DIM],  name = 'SAM_W_logstd_A6')
SAM_B_logstd_A6 = tf.get_variable(shape = [LATENT_DIM],  name = 'SAM_B_logstd_A6')
DEC_W1_A6 = tf.get_variable(shape = [LATENT_DIM, ENC_DIM],  name = 'DEC_W1_A6')
DEC_B1_A6 = tf.get_variable(shape = [ENC_DIM],  name = 'DEC_B1_A6')
DEC_W2_A6 = tf.get_variable(shape = [ENC_DIM, IMG_SIZE],  name = 'DEC_W2_A6')
DEC_B2_A6 = tf.get_variable(shape = [IMG_SIZE],  name = 'DEC_B2_A6')
ATT_W1_A6 = tf.get_variable(shape = [ENC_DIM, 1],  name = 'ATT_W1_A6')
ATT_B1_A6 = tf.get_variable(shape = [1],  name = 'ATT_B1_A6')
# 0th Capsule Forward Pass
Y_1_A6 = tf.add(tf.matmul(X, ENC_W1_A6), ENC_B1_A6)
Y_2_A6 = tf.nn.relu(Y_1_A6)
Y_2_1_A6 = tf.nn.dropout(Y_2_A6, PKEEP)
Y_3_A6 = tf.add(tf.matmul(Y_2_1_A6, ENC_W2_A6), ENC_B2_A6)
Y_4_A6 = tf.nn.tanh(Y_3_A6)
attr_1_A6 = tf.add(tf.matmul(Y_2_1_A6, ATT_W1_A6), ATT_B1_A6)
attr_A6 = tf.nn.sigmoid(attr_1_A6)
Y_4_1_A6 = tf.nn.dropout(Y_4_A6, PKEEP)
mu_A6 = tf.add(tf.matmul(Y_4_1_A6, SAM_W_mu_A6), SAM_B_mu_A6)
logstd_A6 = tf.add(tf.matmul(Y_4_1_A6, SAM_W_logstd_A6), SAM_B_logstd_A6)
noise_A6 = tf.random_normal([1, LATENT_DIM])
Z_A6 = mu_A6 + tf.multiply(noise_A6, tf.exp(.5*logstd_A6))
Y_5_A6 = tf.add(tf.matmul(Z_A6, DEC_W1_A6), DEC_B1_A6)
Y_6_A6 = tf.nn.relu(Y_5_A6)
Y_6_1_A6 = tf.nn.dropout(Y_6_A6, PKEEP)
Y_7_A6 = tf.add(tf.matmul(Y_6_1_A6, DEC_W2_A6), DEC_B2_A6)
Y_7_1_A6 = tf.multiply(Y_7_A6, attr_A6)
Y_rec_A6 = tf.nn.sigmoid(Y_7_1_A6)
# 0th Capsule KLT Loss
KLT_A6 = -0.5*tf.reduce_sum(1 + 2*logstd_A6 - tf.pow(mu_A6, 2) - tf.exp(2*logstd_A6), axis = 1)
# 0th Capsule Attr Pred
attr_loss_A6 = tf.nn.sigmoid_cross_entropy_with_logits(logits = attr_A6, labels = ph_A6)